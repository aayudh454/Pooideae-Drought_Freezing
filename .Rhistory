library(ggplot2)
library(scales)
dtf <- data.frame(x=Photoperoid, y=hours, fill=Photoperoid)
ggplot(dtf, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
opts(axis.title.x = theme_blank())
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y * 100, "%"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
opts(axis.title.x = theme_blank())
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
ggplot(df, aes(x=Photoperoid, y=hours, fill=Photoperoid)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
opts(axis.title.x = theme_blank())
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
ggplot(df, aes(x=Photoperoid, y=hours, fill=Photoperoid)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE)
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format()) +
opts(axis.title.x = theme_blank())
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1))) +
scale_y_continuous("Anteil in Prozent", labels = percent_format())
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
head(df)
require("ggplot2")
#style 2
p<-ggplot(data=df, aes(x=Photoperoid, y=hours, fill=Photoperoid)) + ylim(0,24) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
geom_bar(stat="identity")+theme_classic()
p + scale_fill_grey()
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
head(df)
require("ggplot2")
#style 2
p<-ggplot(data=df, aes(x=Photoperoid, y=hours, fill=Photoperoid)) + ylim(0,24) +
geom_bar(stat="identity")+theme_classic()
p + scale_fill_grey()
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
head(df)
require("ggplot2")
#style 2
p<-ggplot(data=df, aes(x=Photoperoid, y=hours, fill=Photoperoid)) + ylim(0,24) +
geom_bar(stat="identity")+theme_classic()
p + scale_fill_grey()+geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
head(df)
require("ggplot2")
#style 2
p<-ggplot(data=df, aes(x=Photoperoid, y=hours, fill=Photoperoid),label = paste(y, "h")) + ylim(0,24) +
geom_bar(stat="identity")+theme_classic()
p + scale_fill_grey()
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x), legend = FALSE) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
head(df)
require("ggplot2")
#style 2
p<-ggplot(data=df, aes(x=Photoperoid, y=hours, fill=Photoperoid)) + ylim(0,24) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))
+ theme_classic()
p + scale_fill_grey()
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
df <- data.frame(Photoperoid=c("Dark", "Light"),
hours=c(8,16))
head(df)
require("ggplot2")
#style 2
p<-ggplot(data=df, aes(x=Photoperoid, y=hours, fill=Photoperoid)) + ylim(0,24) +
geom_bar(stat="identity")
+ theme_classic()
p + scale_fill_grey()
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = photoperoid)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
# Add error bars
p + labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = photoperoid)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+abs(title="B. distachyon",
x="Photoperoid", y = "hours")+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = photoperoid)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +ylim(0,24) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +ylim(0,24) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
labs(title="B. distachyon",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +ylim(0,24) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
labs(title="",
x="Photoperoid", y = "hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(8,16))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +ylim(0,24) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
labs(title="",
x="Photoperoid", y = "Hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(12,12))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +ylim(0,24) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
labs(title="",
x="Photoperoid", y = "Hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(plyr)
library(ggplot2)
library(scales)
df <- data.frame(x=c("Dark", "Light"),
y=c(24,0))
ggplot(df, aes(x, y)) +
geom_bar(stat = "identity", aes(fill = x)) +ylim(0,24) +
geom_text(aes(label = paste(y, "h"),
vjust = ifelse(y >= 0, 0, 1)))+
labs(title="",
x="Photoperoid", y = "Hours")+
scale_fill_manual(values=c('black',"yellow"))+
theme_classic()
library(ape)
library(geiger)
library(seqinr)
focal_species_tree <- read.tree(text=("(Moss, (Fern, (Gymnosperm, (Amborella, (Grasses, Arabidopsis)))));"))
LANDPLANTS <- read.tree(text=("(Moss, (Fern, (Gymnosperm, (Amborella, (Grasses, Arabidopsis)))));"))
ANGIOSPERMS <- read.tree(text=("(Amborella, (Grasses, Arabidopsis));"))
tree <- plot(focal_species_tree, type = "c", show.tip.label = TRUE,
show.node.label = TRUE, edge.color = "grey", edge.width = 24, tip.color = "black", cex = 1.8)
land_plants <- read.tree(text=("(Moss, (Fern, (Magnoiales, (Amborella, (Grasses, Arabidopsis)))));"))
plot(land_plants, type = "phylogram", show.tip.label = TRUE,
show.node.label = TRUE, edge.color = "black", edge.width = 4, tip.color = "black", cex = 1.8)
land_plants <- read.tree(text=("(Moss, (Fern, (Gymnosperm, (Amborella, (Grasses, Arabidopsis)))));"))
plot(land_plants, type = "phylogram", show.tip.label = TRUE,
show.node.label = TRUE, edge.color = "black", edge.width = 4, tip.color = "black", cex = 1.8)
source('/private/var/folders/fd/2rfgylv117q8p18tkvbg0qlc0000gn/T/com.microsoft.Outlook/Outlook Temp/land_plants_tree_plot.R')
file.choose()
setwd("/Users/aayudhdas/Downloads")
list.files()
data = read.table("Brachyleytrum_precold01.genes.results", header=T, stringsAsFactors=F)
idx = order(data[,"TPM"], decreasing=T)
data[idx[1:10], c("gene_id", "expected_count", "TPM")]
setwd("~/Dropbox/Aayudh PhD/Pooideae-Drought_Freezing")
list.files()
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('Brachypodium_Nassella.genes.counts.matrix.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData=as.matrix(countsTable)
storage.mode(countData) = "integer"
head(countData)
conds <- read.delim("colsData_all.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
#names(countData) <- sub("ContigName", "", names(countData))
#row.names(countData) <- countData[,1]
#countData <- countData[,-1]
dim(countData)
dim(colData)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ cond + cond:pop)
dds
dim(dds)
# Filtering to remove rows with 0 reads
dds <- dds[ rowSums(counts(dds)) > 1, ]
dim(dds)
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
plotMA(res, main="Control vs Drought", ylim=c(-5,7), xlim=c(1e+01, 1e+04))
#Plot counts
d <- plotCounts(dds, gene="TRINITY_DN65045_c1_g1", intgroup=(c("cond", "rep", "pop")), returnData=TRUE)
d
p <- ggplot(d, aes(x= cond, y=count, shape = cond, color=pop)) +
theme_minimal() + theme(text = element_text(size=20),
panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
#Effects of transformations on the variance(http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#plot-counts)
ntd <- normTransform(dds)
library("vsn")
meanSdPlot(assay(ntd))
rld <- rlog(dds, blind=FALSE)
dds.norm <-  estimateSizeFactors(dds)
sizeFactors(dds.norm)
boxplot(log2(counts(dds.norm)+epsilon),  col=col.pheno.selected, cex.axis=0.7,
las=1, xlab="log2(counts)", horizontal=TRUE, main="Raw counts")
epsilon <- 1
par(mfrow=c(2,2),cex.lab=0.7)
boxplot(log2(counts(dds.norm)+epsilon), col=col.pheno.selected, cex.axis=0.7,
las=1, xlab="log2(counts)", horizontal=TRUE, main="Raw counts")
dds.disp <- estimateDispersions(dds.norm)
plotDispEsts(dds.disp)
plotDispEsts(dds.disp, xlim=c(1e-01, 1e+10)
plotDispEsts(dds.disp, xlim=c(1e-01, 1e+10))
plotDispEsts(dds.disp)
plotDispEsts(dds.disp)
plotDispEsts(dds.disp)
data(tamoxifen_peaks)
library(DiffBind)
library("DiffBind")
source("https://bioconductor.org/biocLite.R")
biocLite("DiffBind")
data(tamoxifen_peaks)
data(tamoxifen_peaks)
biocLite("DiffBind")
data("tamoxifen_peaks")
summary(res)
m <- matrix(nrow=5, ncol=3, c(0, 1, 1, -1, 0, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1))
m
colnames(m)=c("A", "B", "C")
m
vennDiagram(m, names=c("A", "B", "C"))
library("vennDiagram")
install.packages('VennDiagram')
library("vennDiagram")
library("VennDiagram")
vennDiagram(m, names=c("A", "B", "C"))
VennDiagram(m, names=c("A", "B", "C"))
m <- matrix(nrow=5, ncol=3, c(0, 1, 1, -1, 0, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1))
m
colnames(m)=c("A", "B", "C")
m
row.names(m)= c("gen1", "gen2", "gen3", "gen4", "gen5")
m
vennDiagram(m, "up")
setwd("~/Dropbox/Aayudh PhD/Pooideae-Drought_Freezing")
list.files()
library("DESeq2")
library("ggplot2")
countsTable <- read.delim('Brachypodium_Nassella.genes.counts.matrix.txt', header=TRUE, stringsAsFactors=TRUE, row.names=1)
countData=as.matrix(countsTable)
storage.mode(countData) = "integer"
head(countData)
conds <- read.delim("colsData_all.txt", header=TRUE, stringsAsFactors=TRUE, row.names=1)
head(conds)
colData <- as.data.frame(conds)
head(colData)
#names(countData) <- sub("ContigName", "", names(countData))
#row.names(countData) <- countData[,1]
#countData <- countData[,-1]
dim(countData)
dim(colData)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = colData,
design = ~ pop)
dds
dim(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
dim(dds)
dds <- DESeq(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
summary(res)
plotMA(res, main="Control vs Drought", ylim=c(-5,7), xlim=c(1e+01, 1e+04))
plotMA(res, main="Control vs Drought", ylim=c(-10,10), xlim=c(1e+01, 1e+08))
plotMA(res, main="Control vs Drought", ylim=c(-20,20), xlim=c(1e+01, 1e+08))
plotMA(res, main="Control vs Drought", ylim=c(-15,15), xlim=c(1e-01, 1e+05))
d <- plotCounts(dds, gene="TRINITY_DN71934_c3_g1", intgroup=(c("cond", "rep", "pop")), returnData=TRUE)
d
p <- ggplot(d, aes(x= cond, y=count, shape = cond, color=pop)) +
theme_minimal() + theme(text = element_text(size=20),
panel.grid.major = element_line(colour = "grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size = 3)
p
ntd <- normTransform(dds,parallel=T)
ntd <- normTransform(dds)
library("vsn")
meanSdPlot(assay(ntd))
rld <- rlog(dds, blind=FALSE,parallel=T)
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
plotPCA(vsd, intgroup=c("cond", "pop"))
plotPCA(vsd, intgroup=c("pop"))
dds.norm <-  estimateSizeFactors(dds)
sizeFactors(dds.norm)
dds.disp <- estimateDispersions(dds.norm)
plotDispEsts(dds.disp)
summary(res)
summary(res <- decideTestsDGE(et, p=0.05, adjust="BH"))
library("vsn")
meanSdPlot(assay(ntd))
